<?php
/**
 * @file
 * Test file for Matomo module.
 */

/**
 * Test general functionality.
 */
class MatomoBasicTest extends BackdropWebTestCase {

  protected $profile = 'testing';

  /**
   * User without permissions to edit snippets.
   *
   * @var object|false
   */
  protected $noSnippetUser;

  protected function setUp() {
    parent::setUp('matomo');

    // Basic setup for the "testing" profile.
    config_set('system.core', 'site_frontpage', 'node');
    user_role_grant_permissions(BACKDROP_ANONYMOUS_ROLE, array('access content'));
    user_role_grant_permissions(BACKDROP_AUTHENTICATED_ROLE, array('access content'));

    $permissions = array(
      'access administration pages',
      'administer matomo',
    );

    // User to set up matomo.
    $this->noSnippetUser = $this->backdropCreateUser($permissions);
    $permissions[] = 'add js snippets for matomo';
    $admin_user = $this->backdropCreateUser($permissions);
    $this->backdropLogin($admin_user);
    return TRUE;
  }

  protected function testMatomoConfiguration() {
    // Check for setting page's presence.
    $this->backdropGet('admin/config/system/matomo');
    $this->assertRaw(t('Matomo site ID'), '[testMatomoConfiguration]: Settings page displayed.');

    // User should have access to code snippets.
    $this->assertFieldByName('codesnippet_before');
    $this->assertFieldByName('codesnippet_after');
    $this->assertNoFieldByXPath("//textarea[@name='codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is enabled.');
    $this->assertNoFieldByXPath("//textarea[@name='codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is enabled.');

    // Login as user without JS permissions.
    $this->backdropLogin($this->noSnippetUser);
    $this->backdropGet('admin/config/system/matomo');

    // User should *not* have access to snippets, but create fields.
    $this->assertFieldByName('codesnippet_before');
    $this->assertFieldByName('codesnippet_after');
    $this->assertFieldByXPath("//textarea[@name='codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is disabled.');
    $this->assertFieldByXPath("//textarea[@name='codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is disabled.');
  }

  protected function testMatomoPageVisibility() {
    $ua_code = '1';
    $config = config('matomo.settings');

    $config->set('site_id', $ua_code);
    $config->set('url_http', 'http://example.com/matomo/');
    $config->set('url_https', 'https://example.com/matomo/');

    // Show tracking on "every page except the listed pages".
    $config->set('visibility_pages', 0);
    // Disable tracking one "admin*" pages only.
    $config->set('pages', "admin\nadmin/*");
    // Enable tracking only for authenticated users only.
    $config->set('roles', array(BACKDROP_AUTHENTICATED_ROLE => BACKDROP_AUTHENTICATED_ROLE));
    $config->save();

    config_set('system.core', 'preprocess_js', 0);

    // Check tracking code visibility.
    $this->backdropGet('');
    $this->assertRaw('/matomo/matomo.js', '[testMatomoPageVisibility]: Custom tracking script is displayed for authenticated users.');
    $this->assertRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is displayed for authenticated users.');

    // Test whether tracking code is not included on pages to omit.
    $this->backdropGet('admin');
    $this->assertNoRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is not displayed on admin page.');
    $this->backdropGet('admin/config/system/matomo');
    // Checking for tracking code URI here, as $ua_code is displayed in the
    // form.
    $this->assertNoRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is not displayed on admin subpage.');

    // Test whether tracking code display is properly flipped.
    $config->set('visibility_pages', 1);
    $config->save();
    $this->backdropGet('admin');
    $this->assertRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is displayed on admin page.');
    $this->backdropGet('admin/config/system/matomo');
    // Checking for tracking code URI here, as $ua_code is displayed in the
    // form.
    $this->assertRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is displayed on admin subpage.');
    $this->backdropGet('');
    $this->assertNoRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is NOT displayed on front page.');

    // Test whether tracking code is not display for anonymous.
    $this->backdropLogout();
    $this->backdropGet('');
    $this->assertNoRaw('u+"matomo.php"', '[testMatomoPageVisibility]: Tracking code is NOT displayed for anonymous.');

    // Switch back to every page except the listed pages.
    $config->set('visibility_pages', 0);
    // Enable tracking code for all user roles.
    $config->set('roles', array());
    $config->save();

    // Test whether 403 forbidden tracking code is shown if user has no access.
    $this->backdropGet('admin');
    $this->assertRaw('403/URL = "', '[testMatomoPageVisibility]: 403 Forbidden tracking code shown if user has no access.');

    // Test whether 404 not found tracking code is shown on non-existent pages.
    $this->backdropGet($this->randomName(64));
    $this->assertRaw('404/URL = "', '[testMatomoPageVisibility]: 404 Not Found tracking code shown on non-existent page.');
  }

  protected function testMatomoTrackingCode() {
    $ua_code = '2';
    $config = config('matomo.settings');
    $config->set('site_id', $ua_code);
    $config->set('url_http', 'http://example.com/matomo/');
    $config->set('url_https', 'https://example.com/matomo/');

    // Show tracking code on every page except the listed pages.
    $config->set('visibility_pages', 0);
    // Enable tracking code for all user roles.
    $config->set('roles', array());

    /* Sample JS code as added to page:
    <script type="text/javascript">
    var _paq = _paq || [];
    (function(){
        var u=(("https:" == document.location.protocol) ? "https://{$MATOMO_URL}" : "http://{$MATOMO_URL}");
        _paq.push(['setSiteId', {$IDSITE}]);
        _paq.push(['setTrackerUrl', u+'matomo.php']);
        _paq.push(['trackPageView']);
        var d=document,
            g=d.createElement('script'),
            s=d.getElementsByTagName('script')[0];
            g.type='text/javascript';
            g.defer=true;
            g.async=true;
            g.src=u+'matomo.js';
            s.parentNode.insertBefore(g,s);
    })();
    </script>
    */

    // Test whether tracking code uses latest JS.
    $config->set('cache', 0);
    $config->save();
    $this->backdropGet('');
    $this->assertRaw('u+"matomo.php"', '[testMatomoTrackingCode]: Latest tracking code used.');

    // Test if tracking of User ID is enabled.
    $config->set('trackuserid', 1);
    $config->save();
    $this->backdropGet('');
    $this->assertRaw('_paq.push(["setUserId", ', '[testMatomoTrackingCode]: Tracking code for User ID is enabled.');

    // Test if tracking of User ID is disabled.
    $config->set('trackuserid', 0);
    $config->save();
    $this->backdropGet('');
    $this->assertNoRaw('_paq.push(["setUserId", ', '[testMatomoTrackingCode]: Tracking code for User ID is disabled.');

    // Test whether single domain tracking is active.
    $this->backdropGet('');
    $this->assertNoRaw('_paq.push(["setCookieDomain"', '[testMatomoTrackingCode]: Single domain tracking is active.');

    // Enable "One domain with multiple subdomains".
    $config->set('domain_mode', 1);
    $config->save();
    $this->backdropGet('');

    // Test may run on localhost, an ipaddress or real domain name.
    // TODO: Workaround to run tests successfully. This feature cannot get
    // tested reliable.
    global $cookie_domain;
    if (count(explode('.', $cookie_domain)) > 2 && !is_numeric(str_replace('.', '', $cookie_domain))) {
      $this->assertRaw('_paq.push(["setCookieDomain"', '[testMatomoTrackingCode]: One domain with multiple subdomains is active on real host.');
    }
    else {
      // Special cases, Localhost and IP addresses don't show 'setCookieDomain'.
      $this->assertNoRaw('_paq.push(["setCookieDomain"', '[testMatomoTrackingCode]: One domain with multiple subdomains may be active on localhost (test result is not reliable).');
    }

    // Test whether the BEFORE and AFTER code is added to the tracker.
    $config->set('codesnippet_before', '_paq.push(["setLinkTrackingTimer", 250]);');
    $config->set('codesnippet_after', '_paq.push(["t2.setSiteId", 2]);_gaq.push(["t2.trackPageView"]);');
    $config->save();
    $this->backdropGet('');
    $this->assertRaw('setLinkTrackingTimer', '[testMatomoTrackingCode]: Before codesnippet has been found with "setLinkTrackingTimer" set.');
    $this->assertRaw('t2.trackPageView', '[testMatomoTrackingCode]: After codesnippet with "t2" tracker has been found.');
  }

  /**
   * Test the noscript fallback tracking code.
   */
  protected function testMatomoNojsFallback() {
    $config = config('matomo.settings');
    $config->set('site_id', '5');
    $config->set('noscript', FALSE);
    $config->set('url_http', 'https://example.com/');
    $config->set('url_https', 'https://example.com/');
    $config->save();
    $fallback_code = '<!-- Matomo --><noscript><p><img src="https://example.com/matomo.php?idsite=5&amp;rec=1" style="border:0" alt="" /></p></noscript><!-- End Matomo -->';

    $this->backdropGet('<front>');
    $this->assertNoRaw($fallback_code, '[testMatomoTrackingCode]: Fallback code not added when disabled.');

    $config->set('noscript', TRUE);
    $config->save();
    cache('page')->flush();
    $this->backdropGet('<front>');
    $this->assertRaw($fallback_code, '[testMatomoTrackingCode]: Fallback code present when enabled.');

    // Now only track anonymous.
    $config->set('roles', array(BACKDROP_ANONYMOUS_ROLE => BACKDROP_ANONYMOUS_ROLE));
    $config->save();
    $this->backdropGet('<front>');
    $this->assertNoRaw($fallback_code, '[testMatomoTrackingCode]: Fallback code not added when role not tracked.');

    $this->backdropLogout();
    $this->backdropGet('<front>');
    $this->assertRaw($fallback_code, '[testMatomoTrackingCode]: Fallback code present when role is tracked.');
  }
}
